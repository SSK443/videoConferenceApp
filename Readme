## Project Nexmeet: A 20-Day MERN Stack Plan

### Project Overview

**Nexmeet** will be a web-based video conferencing application built using the MERN stack. It will be designed as a simple, modern, and secure platform for users to host and join video meetings. The project will be structured like a real-world SaaS product, with features like user authentication, custom meeting rooms, chat, screen sharing, and admin controls.

### Core Features

- **User Authentication:** Users can register and log in with a username/password or a Google account.
    
- **Custom Meeting Rooms:** Admins can create custom meeting links to share with users.
    
- **High-Quality Video/Audio:** Leveraging WebRTC for real-time communication.
    
- **Real-time Chat:** A messaging feature for users within a meeting.
    
- **Screen Sharing:** Users can share their screens with admin permission.
    
- **Meeting Controls:** Mute/unmute, camera on/off, and other controls for users and admins.
    
- **Admin Privileges:** Admins can mute all users, turn off their cameras, and remove them from a meeting.
    
- **Modern UI/UX:** A clean, intuitive, and responsive user interface built with React and Tailwind CSS.
    

### Tech Stack

- **MongoDB:** A NoSQL database to store user data, meeting information, and chat messages.
    
- **Express.js:** A back-end web application framework for Node.js to build our RESTful APIs.
    
- **React.js:** A front-end JavaScript library for building the user interface.
    
- **Node.js:** A JavaScript runtime environment to run our server-side code.
    
- **Socket.IO:** A library for real-time, bidirectional communication between the client and server (for chat and signaling).
    
- **WebRTC (PeerJS/Simple-Peer):** A technology that enables peer-to-peer video and audio streaming directly in the browser. We'll use a library to simplify its implementation.
    
- **JSON Web Tokens (JWT):** For secure user authentication.
    
- **Tailwind CSS:** A utility-first CSS framework for styling the application.
    

### 20-Day Development Plan

#### **Phase 1: Foundation and Setup (Days 1-5)**

- **Day 1: Project Setup & Environment**
    
    - Install Node.js, npm, and MongoDB.
        
    - Set up a new project directory with a `client` (for React) and a `server` (for Express) folder.
        
    - Initialize a new Node.js project in the `server` directory (`npm init -y`).
        
    - Install initial dependencies for the server: `express`, `mongoose`, `cors`, `dotenv`, and `nodemon`.
        
    - Create a basic Express server that listens on a port.
        
- **Day 2: Database and User Model**
    
    - Set up a new MongoDB database and connect it to your Express server using Mongoose.
        
    - Create a User schema with fields for `username`, `email`, `password`, and `googleId`.
        
    - Create API routes for user registration and login (without functionality yet).
        
- **Day 3: User Registration**
    
    - Implement the user registration logic.
        
    - Hash passwords using `bcryptjs` before saving them to the database.
        
    - Create a registration form in a basic React app (use `create-react-app` in the `client` directory).
        
- **Day 4: User Login and JWT Authentication**
    
    - Implement the user login logic.
        
    - Compare the hashed password with the user's input.
        
    - Generate a JSON Web Token (JWT) upon successful login and send it to the client.
        
    - Store the JWT on the client-side (e.g., in local storage).
        
- **Day 5: Google OAuth**
    
    - Set up a new project in the Google API Console to get your client ID and secret.
        
    - Implement Google OAuth using Passport.js.
        
    - Create a route for Google authentication on the server.
        
    - Add a "Login with Google" button on the front-end.
        

#### **Phase 2: Core Features (Days 6-15)**

- **Day 6: Frontend Structure and Styling**
    
    - Set up React Router for navigation.
        
    - Create basic components: `Navbar`, `HomePage`, `LoginPage`, `RegisterPage`, and `DashboardPage`.
        
    - Install and configure Tailwind CSS for styling.
        
    - Create a modern and clean layout for the application.
        
- **Day 7: Protected Routes**
    
    - Create a private route component in React that checks if a user is authenticated (using the JWT).
        
    - Redirect unauthenticated users to the login page if they try to access a protected route.
        
- **Day 8: Real-time Chat with Socket.IO (Backend)**
    
    - Integrate Socket.IO with your Express server.
        
    - Set up a basic connection and create events for joining a room and sending messages.
        
- **Day 9: Real-time Chat with Socket.IO (Frontend)**
    
    - Install the Socket.IO client library in your React app.
        
    - Create a `Chat` component with a message input and a display area.
        
    - Connect to the Socket.IO server and implement the logic for sending and receiving messages.
        
- **Day 10: WebRTC Introduction and Setup**
    
    - Research and choose a WebRTC library (PeerJS is a good option for beginners).
        
    - Integrate the chosen library into your project.
        
    - Understand the basic concepts of WebRTC: peers, connections, and streams.
        
- **Day 11: Video/Audio Streaming (Backend)**
    
    - Use Socket.IO for signalingâ€”to exchange information between peers before they connect directly.
        
    - Create Socket.IO events for users joining and leaving a video call.
        
- **Day 12: Video/Audio Streaming (Frontend)**
    
    - Create a `MeetingRoom` component.
        
    - Get access to the user's camera and microphone using `navigator.mediaDevices.getUserMedia`.
        
    - Display the local video stream.
        
    - Use the WebRTC library and Socket.IO to connect with other users in the room and display their video streams.
        
- **Day 13: Meeting Controls**
    
    - Implement buttons to mute/unmute the microphone and turn the camera on/off.
        
    - Add logic to toggle the audio and video tracks in the local media stream.
        
- **Day 14: Screen Sharing**
    
    - Implement screen sharing using `navigator.mediaDevices.getDisplayMedia`.
        
    - Add a button to start/stop screen sharing.
        
    - Replace the camera stream with the screen stream when screen sharing is active.
        
- **Day 15: Admin Controls (Part 1)**
    
    - Add a `role` field to the User schema (`user` or `admin`).
        
    - Implement the logic to identify the admin of a meeting.
        
    - Create a feature for the admin to mute any user in the meeting.
        

#### **Phase 3: Final Touches and Deployment (Days 16-20)**

- **Day 16: Admin Controls (Part 2)**
    
    - Implement features for the admin to turn off a user's camera and to remove a user from the meeting.
        
    - Use Socket.IO to send these commands from the admin to the specific user.
        
- **Day 17: UI/UX Improvements**
    
    - Refine the styling of the application.
        
    - Add loading indicators and user feedback messages.
        
    - Ensure the application is responsive and works well on different screen sizes.
        
- **Day 18: Adding Polls**
    
    - Design a simple poll feature within the chat.
        
    - Create a new Mongoose schema for polls.
        
    - Use Socket.IO to create and vote on polls in real-time.
        
- **Day 19: "How to Use" Guide**
    
    - Create a simple page or a modal that explains how to use the application.
        
    - Include instructions on creating a meeting, joining a meeting, and using the in-meeting controls.
        
- **Day 20: Deployment**
    
    - Prepare the application for deployment.
        
    - Deploy the back-end to a service like Heroku or Render.
        
    - Deploy the front-end to a service like Netlify or Vercel.
        
    - Test the deployed application to ensure everything works correctly.
        

### Getting Started

For each day, I'll provide you with more detailed instructions and code snippets. We'll start with Day 1 tomorrow. For now, make sure you have **Node.js**, **npm**, and **MongoDB** installed on your computer.

This plan is a roadmap. Don't worry if you need to spend a little more time on some topics. The goal is to learn and build a solid project. I'm here to help you every step of the way!


tailwind command run-   npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch




# MONGO_URI=mongodb+srv://surajskumar443:eSRnBCwwF2Gmpqxx@nextmeetdb.y8q4bcx.mongodb.net/?retryWrites=true&w=majority&appName=nextMeetDB